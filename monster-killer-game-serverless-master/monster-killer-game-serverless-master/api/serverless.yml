service: api

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMO_SCORE_TABLE: scores
    DYNAMO_USER_TABLE: users
    DYNAMO_RANKING_TABLE: ranking

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:ListStreams
        - dynamodb:DescribeStream
      Resource: "arn:aws:dynamodb:${self:provider.region}:*"

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_USER_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_SCORE_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    RankingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_RANKING_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  create-score:
    handler: handler.createScore
    events:
      - http:
          path: score/{userId}
          method: post
          cors: true

  create-user:
    handler: handler.createUser
    events:
      - http:
          path: user
          method: post
          cors: true

  ranking-trigger:
    handler: handler.rankingHandlerEvent
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ScoresTable
              - StreamArn

  get-ranking:
    handler: handler.rankingGetAll
    events:
      - http:
          path: ranking
          method: get
          cors: true
